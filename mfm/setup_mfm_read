#!/usr/bin/env bash

KERNEL_VER=$(uname -r | cut -f1 -d.)

#Files are in same directory as script
dir="$(dirname "$BASH_SOURCE")"
if [ "$(basename "$BASH_SOURCE")" == "setup_mfm_write" ]; then
   DTBOAB="mfm_write-00A0"
   BBIOAB="mfm_w_revab.bbio"
   DTBOC="mfm_write-00C0"
   BBIOC="mfm_w_revc.bbio"
else
   DTBOAB="mfm_read-00A0"
   BBIOAB="mfm_r_revab.bbio"
   DTBOC="mfm_read-00C0"
   BBIOC="mfm_r_revc.bbio"
fi
   
if [ "$KERNEL_VER" -lt "4" ]; then
   # Use legacy cape manager loading functionality
   if [ -e /sys/devices/platform/bone_capemgr/slots ]
   then
      CAPE=/sys/devices/platform/bone_capemgr/slots
   else
      CAPE=/sys/devices/bone_capemgr.*/slots
      # Enable A/D
      echo cape-bone-iio > $CAPE
   fi
   # Depending on default pullup since we haven't loaded the overlay
   echo 61 > /sys/class/gpio/export
   echo in > /sys/class/gpio/gpio61/direction
fi

REV=$(cat /sys/class/gpio/gpio61/value)

if [ "$REV" == "0" ]; then
   echo Rev C Board
   if [ "$KERNEL_VER" -lt "4" ]; then
      /usr/bin/dtc -O dtb -o $dir/$DTBOC.dtbo -b 0 -@ $dir/$DTBOC.dts
      cp $dir/$DTBOC.dtbo /lib/firmware
      echo ${DTBOC/-/:} > $CAPE
   else
      # Batch configure all pins for mfm_rw
      config-pin -c $dir/$BBIOC
   fi
   # Set inactive 31 recovery 46,15,26,27 Drive select, 110 write
   # 50 read transceiver enable, low enabled
   # 8-11 rev B head, all low is head 0 after inversion
   pins_low="8 9 10 11 31 46 15 26 27 110 50"
   # 113 TRACK 0
   pins_in="113"
   # 44 emu second driver emulation, disable
   # 60 MFM emulation tranceiver enable, high is disabled
   # 14,30(C) drive selected LEDS
   # 60 emulation xcvr en 48 testing(C)
   pins_high="14 30 44 60"
else
   if [ "$KERNEL_VER" -lt "4" ]; then
      /usr/bin/dtc -O dtb -o $dir/$DTBOAB.dtbo -b 0 -@ $dir/$DTBOAB.dts
      cp $dir/$DTBOAB.dtbo /lib/firmware
      echo ${DTBOAB/-/:} > $CAPE
      # Detect A/B PIN with P8_16
      echo 46 > /sys/class/gpio/export
      echo in > /sys/class/gpio/gpio46/direction
   else
      config-pin -c $dir/$BBIOAB 
   fi
   REV=$(cat /sys/class/gpio/gpio46/value)
   if [ "$REV" == "0" ]; then
      echo Rev B Board
   else
      echo Rev A Board
   fi
   # Set inactive 22,23,26,27 Drive select, 31 recovery, 110 write
   # 50 read transceiver enable, low enabled
   # 2-5 rev A head, 8-11 rev B head, all low is head 0 after inversion
   pins_low="2 3 4 5 8 9 10 11 22 23 26 27 31 110 50"
   # 14,15 drive selected LEDS
   # 44 emu second driver emulation, disable
   # 60 MFM emulation tranceiver enable, high is disabled
   pins_high="14 15 44 60"
   # 30 TRACK 0
   pins_in="30"
fi

# With univeresal cape header, all pins are exported and set to in by default.
# However, we now support reboot-less operation, so set them all anyway.
if [ "$KERNEL_VER" -lt "4" ]; then
   for pin in $pins_in $pins_low $pins_high; do
      echo $pin > /sys/class/gpio/export
      echo in > /sys/class/gpio/gpio$pin/direction
   done
else
   for pin in $pins_in; do
     if [ ! -d /sys/class/gpio/gpio$pin ]; then
        echo $pin > /sys/class/gpio/export
     fi
     echo in > /sys/class/gpio/gpio$pin/direction
   done
fi

for pin in $pins_low; do
   echo out > /sys/class/gpio/gpio$pin/direction
   echo 0 > /sys/class/gpio/gpio$pin/value
done

for pin in $pins_high; do
   echo out > /sys/class/gpio/gpio$pin/direction
   echo 1 > /sys/class/gpio/gpio$pin/value
done
